(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{365:function(s,a,t){"use strict";t.r(a);var e=t(42),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"开发环境配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开发环境配置"}},[s._v("#")]),s._v(" 开发环境配置")]),s._v(" "),t("h2",{attrs:{id:"前提"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前提"}},[s._v("#")]),s._v(" 前提")]),s._v(" "),t("ul",[t("li",[s._v("前端：Node 14+, Yarn")]),s._v(" "),t("li",[s._v("后端：Go 1.15+")]),s._v(" "),t("li",[s._v("数据库：MongoDB")]),s._v(" "),t("li",[s._v("可选：Nginx, Docker")])]),s._v(" "),t("p",[s._v("应用使用 Echo（Golang 框架）来托管前端文件（8080 端口），默认（生产）情况下需要将生成的静态文件放置到 /server 文件夹的 /public 目录下，但是这样不适合开发环境，因为 React 的开发服务器默认使用 3000 端口，而不是生成静态文件。")]),s._v(" "),t("p",[s._v("所以在开发时，推荐使用 Nginx 作为反向代理的服务器，将 "),t("code",[s._v("/")]),s._v(" 路径代理到 3000 端口的 "),t("code",[s._v("/")]),s._v("，将 "),t("code",[s._v("/api")]),s._v(" 路径代理到 8080 端口的 "),t("code",[s._v("/api")]),s._v("，再将 "),t("code",[s._v("/websocket")]),s._v(" 路径代理到 8080 端口的 "),t("code",[s._v("/websocket")]),s._v("，绕过 Echo 的托管。我使用的 "),t("a",{attrs:{href:"configs/nginx.conf"}},[s._v("nginx.conf")]),s._v(" 可以在项目的 /configs 文件夹中找到，默认托管 80 端口，仅供参考使用。")]),s._v(" "),t("p",[s._v("另外开发环境下需要自己启动一个 MongoDB，这里推荐使用 Docker 进行安装。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("docker run -d -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("27017")]),s._v(":27017 mongo\n")])])]),t("h2",{attrs:{id:"配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[s._v("#")]),s._v(" 配置")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("克隆项目，进入项目文件夹。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" clone https://github.com/Lifeni/i-show-you.git\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" i-show-you\n")])])])]),s._v(" "),t("li",[t("p",[s._v("安装前端依赖。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" webapp\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("yarn")]),s._v("\n")])])])]),s._v(" "),t("li",[t("p",[s._v("在配置好 Nginx 与 MongoDB 之后，运行 Go 程序。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/server\ngo run "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n")])])]),t("p",[s._v("不要忘了命令最后的点。如果可以正常运行，则会出现 Echo 的字符画 Logo 以及 "),t("code",[s._v("Connected to database")]),s._v(" 的字样。之后打开 Nginx 配置中设定的地址即可（如果使用我提供的配置文件，则默认地址为 http://localhost ，也就是本地 80 端口）。")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);