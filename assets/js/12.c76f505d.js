(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{366:function(t,s,a){"use strict";a.r(s);var e=a(42),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"开发环境配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开发环境配置"}},[t._v("#")]),t._v(" 开发环境配置")]),t._v(" "),a("h2",{attrs:{id:"配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),a("p",[t._v("开发之前，你需要先配置开发环境：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("类型")]),t._v(" "),a("th",[t._v("要求")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("前端")]),t._v(" "),a("td",[t._v("Node 14+, Yarn")])]),t._v(" "),a("tr",[a("td",[t._v("后端")]),t._v(" "),a("td",[t._v("Go 1.15+")])]),t._v(" "),a("tr",[a("td",[t._v("数据库")]),t._v(" "),a("td",[t._v("MongoDB")])]),t._v(" "),a("tr",[a("td",[t._v("可选的")]),t._v(" "),a("td",[t._v("Nginx, Caddy, Docker")])])])]),t._v(" "),a("p",[t._v("应用使用 Echo（Golang 框架）来托管前端文件（8080 端口），默认（生产）情况下需要将生成的静态文件放置到 /server 文件夹的 /public 目录下，但是这样不适合开发环境，因为 React 的开发服务器默认使用 3000 端口，而不是生成静态文件。")]),t._v(" "),a("p",[t._v("所以在开发时，推荐使用 Nginx（也提供了 Caddy 的配置文件）作为反向代理的服务器，将 "),a("code",[t._v("/")]),t._v(" 路径代理到 3000 端口的 "),a("code",[t._v("/")]),t._v("，将 "),a("code",[t._v("/api")]),t._v(" 路径代理到 8080 端口的 "),a("code",[t._v("/api")]),t._v("，再将 "),a("code",[t._v("/websocket")]),t._v(" 路径代理到 8080 端口的 "),a("code",[t._v("/websocket")]),t._v("，绕过 Echo 的托管。我使用的 "),a("a",{attrs:{href:"https://github.com/Lifeni/i-show-you/blob/master/configs/nginx.conf",target:"_blank",rel:"noopener noreferrer"}},[t._v("nginx.conf"),a("OutboundLink")],1),t._v(" 可以在项目的 /configs 文件夹中找到，默认托管 80 端口，仅供参考使用。")]),t._v(" "),a("p",[t._v("另外开发环境下需要自己启动一个 MongoDB，这里推荐使用 Docker 进行安装。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("docker run -d -p "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("27017")]),t._v(":27017 mongo\n")])])]),a("p",[t._v("之后你可以启动项目：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("克隆项目，进入项目文件夹。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/Lifeni/i-show-you.git\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" i-show-you\n")])])])]),t._v(" "),a("li",[a("p",[t._v("安装前端依赖。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" web\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("在配置好 Nginx（或者 Caddy）与 MongoDB 之后，运行 Go 程序。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("/server\ngo run "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n")])])]),a("p",[t._v("不要忘了命令最后的点。如果可以正常运行，则会出现 Echo 的字符画 Logo 以及 "),a("code",[t._v("Connected to database")]),t._v(" 的字样。之后打开 Nginx（或者 Caddy）配置中设定的地址即可（如果使用我提供的配置文件，则默认地址为 http://localhost ，也就是本地 80 端口）。")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);